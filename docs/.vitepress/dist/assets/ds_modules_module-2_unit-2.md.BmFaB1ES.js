import{_ as t,c as a,o as n,ae as r}from"./chunks/framework.v5dDmO6C.js";const o="/DATA-STRUCTURE/assets/queue.D9ZGh1Yk.png",s="/DATA-STRUCTURE/assets/queue1.eVk_Hsay.png",f=JSON.parse('{"title":"QUEUE","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ds/modules/module-2/unit-2.md","filePath":"ds/modules/module-2/unit-2.md"}'),i={name:"ds/modules/module-2/unit-2.md"};function l(u,e,d,m,p,_){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="queue" tabindex="-1">QUEUE <a class="header-anchor" href="#queue" aria-label="Permalink to &quot;QUEUE&quot;">â€‹</a></h1><p><img src="'+o+'" alt="Queue Real World Example"></p><ul><li>A queue is a linear data structure that stores items in First In First Out (FIFO) order.</li><li>It is also known as a First Come, First Serve (FCFS).</li><li>It is opened at both the ends (Rear and Front Ends).</li><li>The elements can be inserted at the rear end and deleted from the front end.</li><li>Queue maintains two variables Front and Rear. Initial value of Front and Rear are -1.</li></ul><p><img src="'+s+'" alt="Queue Data Structure"></p><p><strong>Basic operations performed on queue are:</strong></p><ol><li>Insertion-Inserts the element at rear end of the queue .</li><li>Deletion- deletes the element from front end of the queue.</li></ol><p><strong>Implementation of queue:</strong></p><ul><li>Array Implementation of queue</li><li>Linked List Implementation of queue</li></ul>',8)]))}const h=t(i,[["render",l]]);export{f as __pageData,h as default};
