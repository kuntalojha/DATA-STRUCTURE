import{_ as a,c as t,o as r,ae as i}from"./chunks/framework.v5dDmO6C.js";const c=JSON.parse('{"title":"Data Structures","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"syllabus.md","filePath":"syllabus.md"}'),n={name:"syllabus.md"};function o(l,e,s,u,h,p){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="data-structures" tabindex="-1">Data Structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data Structures&quot;">​</a></h1><h2 id="module-1" tabindex="-1">Module 1: <a class="header-anchor" href="#module-1" aria-label="Permalink to &quot;Module 1:&quot;">​</a></h2><h3 id="unit-1" tabindex="-1">Unit 1 <a class="header-anchor" href="#unit-1" aria-label="Permalink to &quot;Unit 1&quot;">​</a></h3><ul><li><strong>Basic concepts</strong> - Algorithm Specification, Performance analysis - time complexity and space complexity, Asymptotic Notation - Big O, Omega and Theta notations, Introduction to Linear and Non Linear data structures.</li></ul><h3 id="unit-2" tabindex="-1">Unit 2 <a class="header-anchor" href="#unit-2" aria-label="Permalink to &quot;Unit 2&quot;">​</a></h3><ul><li><strong>Linear list</strong> – singly linked list implementation, insertion, deletion and searching operations on linear list, circular linked list implementation, doubly linked list implementation, insertion, deletion and searching operations. Applications of linked lists.</li></ul><h2 id="module-2" tabindex="-1">Module 2: <a class="header-anchor" href="#module-2" aria-label="Permalink to &quot;Module 2:&quot;">​</a></h2><h3 id="unit-1-1" tabindex="-1">Unit 1 <a class="header-anchor" href="#unit-1-1" aria-label="Permalink to &quot;Unit 1&quot;">​</a></h3><ul><li><strong>Stacks</strong> - Operations, array and linked representations of stacks, stack applications-infix to postfix conversion, postfix expression evaluation, recursion implementation.</li></ul><h3 id="unit-2-1" tabindex="-1">Unit 2 <a class="header-anchor" href="#unit-2-1" aria-label="Permalink to &quot;Unit 2&quot;">​</a></h3><ul><li><strong>Queues</strong> - operations, array and linked representations. Circular Queue operations, Dequeue, applications of queue.</li></ul><h2 id="module-3" tabindex="-1">Module 3: <a class="header-anchor" href="#module-3" aria-label="Permalink to &quot;Module 3:&quot;">​</a></h2><h3 id="unit-1-2" tabindex="-1">Unit 1 <a class="header-anchor" href="#unit-1-2" aria-label="Permalink to &quot;Unit 1&quot;">​</a></h3><ul><li><strong>Trees</strong> – Terminology, Representation of Trees, Binary tree ADT, Properties of Binary Trees, Binary Tree Representations-array and linked representations, Binary Tree traversals, Threaded binary trees, Binary Heap-Properties, Max and Min Heap, Operations-Insertion and Deletion, Heap sort.</li></ul><h3 id="unit-2-2" tabindex="-1">Unit 2 <a class="header-anchor" href="#unit-2-2" aria-label="Permalink to &quot;Unit 2&quot;">​</a></h3><ul><li><strong>Search Trees</strong> - Binary Search tree, Tree traversals, AVL tree – operations, B-tree – operations, B+ trees, Red Black tree.</li></ul><h2 id="module-4" tabindex="-1">Module 4: <a class="header-anchor" href="#module-4" aria-label="Permalink to &quot;Module 4:&quot;">​</a></h2><h3 id="unit-1-3" tabindex="-1">Unit 1 <a class="header-anchor" href="#unit-1-3" aria-label="Permalink to &quot;Unit 1&quot;">​</a></h3><ul><li><strong>Graphs</strong> - Terminology, sequential and linked representation, graph traversals: Depth First Search &amp; Breadth First Search implementation. Minimum spanning trees, Prims and Kruskals method.</li></ul><h3 id="unit-2-3" tabindex="-1">Unit 2 <a class="header-anchor" href="#unit-2-3" aria-label="Permalink to &quot;Unit 2&quot;">​</a></h3><ul><li><strong>Searching and Sorting</strong> - Linear Search and Binary Search, Bubble sort, Insertion sort, Quick and Merge sort.</li></ul><h2 id="module-5" tabindex="-1">Module 5: <a class="header-anchor" href="#module-5" aria-label="Permalink to &quot;Module 5:&quot;">​</a></h2><h3 id="unit-1-4" tabindex="-1">Unit 1 <a class="header-anchor" href="#unit-1-4" aria-label="Permalink to &quot;Unit 1&quot;">​</a></h3><ul><li><strong>Hashing</strong> - Hash table, Hash table representations, hash functions, collision resolution techniques- separate chaining, open addressing-linear probing, quadratic probing, double hashing, Re hashing, Extendible hashing.</li></ul><h3 id="unit-2-4" tabindex="-1">Unit 2 <a class="header-anchor" href="#unit-2-4" aria-label="Permalink to &quot;Unit 2&quot;">​</a></h3><ul><li><strong>Pattern matching</strong> - Introduction, Brute force, the Boyer –Moore algorithm, Knuth-Morris-Pratt algorithm.</li></ul><hr><h1 id="data-structures-lab" tabindex="-1">Data Structures Lab <a class="header-anchor" href="#data-structures-lab" aria-label="Permalink to &quot;Data Structures Lab&quot;">​</a></h1><h2 id="experiment-1" tabindex="-1">Experiment 1: <a class="header-anchor" href="#experiment-1" aria-label="Permalink to &quot;Experiment 1:&quot;">​</a></h2><blockquote><p>Write a C program that uses functions to perform the following operations on singly linked list: <code>I. Creation. II. Insertion. III. Traversal. IV. Merge two single linked lists.</code></p></blockquote><h2 id="experiment-2" tabindex="-1">Experiment 2: <a class="header-anchor" href="#experiment-2" aria-label="Permalink to &quot;Experiment 2:&quot;">​</a></h2><blockquote><p>Write a C program that uses functions to perform the following operations on doubly linked list. <code> I. Creation II. Insertion III. Deletion IV. Traversal</code></p></blockquote><h2 id="experiment-3" tabindex="-1">Experiment 3: <a class="header-anchor" href="#experiment-3" aria-label="Permalink to &quot;Experiment 3:&quot;">​</a></h2><blockquote><p>Write a C program that implement stack operations using <code>&gt; I. Arrays II. Linked Lists</code></p></blockquote><h2 id="experiment-4" tabindex="-1">Experiment 4: <a class="header-anchor" href="#experiment-4" aria-label="Permalink to &quot;Experiment 4:&quot;">​</a></h2><blockquote><p>I. Write a C program to convert infix expression to postfix expression using stack<br> II. Write a C program to evaluate postfix expression`</p></blockquote><h2 id="experiment-5" tabindex="-1">Experiment 5: <a class="header-anchor" href="#experiment-5" aria-label="Permalink to &quot;Experiment 5:&quot;">​</a></h2><blockquote><p>Write a C program to convert infix expression to prefix expression using stack</p></blockquote><h2 id="experiment-6" tabindex="-1">Experiment 6: <a class="header-anchor" href="#experiment-6" aria-label="Permalink to &quot;Experiment 6:&quot;">​</a></h2><blockquote><p>Write a C program to implement linear queue using. <code> I.Arrays II. Linked Lists.</code></p></blockquote><h2 id="experiment-7" tabindex="-1">Experiment 7: <a class="header-anchor" href="#experiment-7" aria-label="Permalink to &quot;Experiment 7:&quot;">​</a></h2><blockquote><p>Write a C program to perform following operations on a circular Queue <code> I. Insertion II. deletion III. search and count</code></p></blockquote><h2 id="experiment-8" tabindex="-1">Experiment 8: <a class="header-anchor" href="#experiment-8" aria-label="Permalink to &quot;Experiment 8:&quot;">​</a></h2><blockquote><p>Write a C Program to implement binary tree traversals</p></blockquote><h2 id="experiment-9" tabindex="-1">Experiment 9: <a class="header-anchor" href="#experiment-9" aria-label="Permalink to &quot;Experiment 9:&quot;">​</a></h2><blockquote><p>Write a C Program to implement AVL tree operations</p></blockquote><h2 id="experiment-10" tabindex="-1">Experiment 10: <a class="header-anchor" href="#experiment-10" aria-label="Permalink to &quot;Experiment 10:&quot;">​</a></h2><blockquote><p>Implementation of a Graph representation using Adjacency Matrix.</p></blockquote><h2 id="experiment-11" tabindex="-1">Experiment 11: <a class="header-anchor" href="#experiment-11" aria-label="Permalink to &quot;Experiment 11:&quot;">​</a></h2><blockquote><p>I.Write a program to implement Linear Search technique.</p><p>II. Write a program to implement Binary Search technique.</p></blockquote><h2 id="experiment-12" tabindex="-1">Experiment 12: <a class="header-anchor" href="#experiment-12" aria-label="Permalink to &quot;Experiment 12:&quot;">​</a></h2><blockquote><p>I. Write a program to implement Bubble sort technique.</p><p>II. Write a program to implement Insertion sort technique.</p></blockquote><h2 id="experiment-13" tabindex="-1">Experiment 13: <a class="header-anchor" href="#experiment-13" aria-label="Permalink to &quot;Experiment 13:&quot;">​</a></h2><blockquote><p>I. Write a program to implement Quick sort technique.</p><p>II. Write a program to implement Merge sort technique</p></blockquote>',54)]))}const m=a(n,[["render",o]]);export{c as __pageData,m as default};
